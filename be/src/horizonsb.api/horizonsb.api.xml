<?xml version="1.0"?>
<doc>
    <assembly>
        <name>horizonsb.api</name>
    </assembly>
    <members>
        <member name="M:horizonsb.api.Controllers.API.Admin.AccountsController.PostAccountRegisterAsync(horizonsb.commons.vm.Dtos.Admin.Roles.UserForRegistrationUiModel)">
            <summary>
            POST : Register a new user.
            </summary>
            <param name="managedUserVm">managedUserVM the managed user View Model</param>
            <remarks> return a ResponseEntity with status 201 (Created) if the new user is registered or 400 (Bad Request) if the login or email is already in use or Validation Request Model Error </remarks>
            <response code="201">Created (if the user is registered)</response>
            <response code="400">email in use</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.Admin.AccountsController.PutAccountActivateAsync(System.Guid,horizonsb.commons.vm.Dtos.Admin.Accounts.AccountForActivationModification)">
            <summary>
            PUT : Activate the registered user.
            </summary>
            <param name="userIdToBeActivated">registeredUser Registered User Id to be activated</param>
            <remarks> return the ResponseEntity with status 200 (OK) and the activated user in body, or status 500 (Internal Server Error) if the user couldn't be activated </remarks>
            <response code="200">(OK) and the activated user in body</response>
            <response code="500">500 (Internal Server Error)</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.Admin.AccountsController.PostAccountChangePasswordAsync(horizonsb.commons.vm.Dtos.Admin.Accounts.AccountWithNewPasswordModification)">
            <summary>
            POST  /account/change_password : changes the current user's password
            </summary>
            <remarks> return the current user </remarks>
            <response code="200">200 (OK) and the updated user in body</response>
            <response code="400">400 (Bad Request)</response>
            <response code="500">500 (Internal Server Error) if the user couldn't be updated</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.Admin.AccountsController.PostAccountResetPasswordInitAsync">
            <summary>
            PUT   /account/reset_password/init : Send an email to reset the password of the user
            </summary>
            <remarks> return the current user </remarks>
            <response code="200">200 (OK) and the updated user in body</response>
            <response code="400">400 (Bad Request)</response>
            <response code="500">500 (Internal Server Error) if the user couldn't be updated</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.Admin.AccountsController.PostAccountResetPasswordFinishAsync(horizonsb.commons.vm.Dtos.Admin.Accounts.AccountWithNewPasswordModification)">
            <summary>
            POST   /account/reset_password/finish : Finish to reset the password of the user
            </summary>
            <remarks> return the current user </remarks>
            <response code="200">200 (OK) and the updated user in body</response>
            <response code="400">400 (Bad Request)</response>
            <response code="500">500 (Internal Server Error) if the user couldn't be updated</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.Admin.RolesController.PostRoleRouteAsync(horizonsb.commons.vm.Dtos.Admin.Roles.RoleForCreationUiModel)">
            <summary>
            POST : Create a New Role.
            </summary>
            <param name="roleForCreationUiModel">RoleForCreationUiModel the Request Model for Creation</param>
            <remarks> return a ResponseEntity with status 201 (Created) if the new Role is created, 400 (Bad Request), 500 (Server Error) </remarks>
            <response code="201">Created (if the role is created)</response>
            <response code="400">Bad Request</response>
            <response code="500">Internal Server Error</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.Admin.RolesController.UpdateRoleAsync(System.Guid,horizonsb.commons.vm.Dtos.Admin.Roles.RoleForModificationUiModel)">
            <summary>
            PUT : Update Role with New Role Name
            </summary>
            <param name="id">Role Id the Request Index for Retrieval</param>
            <param name="updatedRole">RoleForModification the Request Model with New Role Name</param>
            <remarks>Change Role providing RoleForModificationUiModel with Modified Role Name</remarks>
            <response code="200">Resource updated correctly.</response>
            <response code="400">The model is not in valid state.</response>
            <response code="403">You have not access for this action.</response>
            <response code="404">Wrong attributes provided.</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.Admin.RolesController.GetRoleAsync(System.Guid,System.String)">
            <summary>
            Get : Retrieve Stored Role providing Role Id
            </summary>
            <param name="id">Role Id the Request Index for Retrieval</param>
            <param name="fields">Fiends to be filtered with for the returned Role</param>
            <remarks>Retrieve Role providing Id and [Optional] fields</remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="404">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.Admin.RolesController.GetRolesAsync(horizonsb.common.infrastructure.Helpers.ResourceParameters.RolesResourceParameters,System.String)">
            <summary>
            Get : Retrieve All/or Partial Paged Stored Roles
            </summary>
            <remarks>Retrieve paged Roles providing Paging Query</remarks>
            <response code="200">Resource retrieved correctly.</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.Admin.UserJwtController.PutUserExpireRefreshTokenAsync(horizonsb.commons.vm.Dtos.Admin.Accounts.UserForRefreshTokenModificationUiModel)">
            <summary>
            PUT : Expire OnDemand Refresh Token providing RefreshToken.
            </summary>
            <param name="refreshToken">RefreshToken key for specified user</param>
            <remarks> return the ResponseEntity with status 200 (Ok) and the new set of Auth and Refresh Token in body, or status 500 (Internal Server Error) if an error occured</remarks>
            <response code="200">(OK) and the activated user in body</response>
            <response code="500">500 (Internal Server Error)</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.Admin.UserJwtController.GetNewTokenByRefreshAsync(System.String)">
            <summary>
            GET : New Token providing RefreshToken.
            </summary>
            <param name="refreshToken">RefreshToken key for specified user</param>
            <remarks> return the ResponseEntity with status 200 (Ok) and the new set of Auth and Refresh Token in body, or status 500 (Internal Server Error) if an error occured</remarks>
            <response code="200">(OK) and the activated user in body</response>
            <response code="500">500 (Internal Server Error)</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.Admin.UsersController.GetUsersAsync(horizonsb.common.infrastructure.Helpers.ResourceParameters.UsersResourceParameters,System.String)">
            <summary>
            Get - Retrieve All/or Partial Paged Stored Persons
            </summary>
            <remarks>Retrieve paged Persons providing Paging Query</remarks>
            <param name="usersResourceParameters"></param>
            <param name="mediaType">Header - use: "application/vnd.marvin.hateoas+json" for custom links response </param>
            <response code="200">Resource retrieved correctly.</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.EventsController.GetEventsByPriorityAsync(System.Int32,System.Int32)">
            <summary>
            Get - Retrieve Stored Events providing Priority Number and Equation
            </summary>
            <param name="priority">Priority Number the Request Index for Retrieval</param>
            <param name="equation">If = 0 = equal, = 1 = min, = 2 = max</param>
            <remarks>Retrieve Events providing Priority and Equation</remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="200">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.EventsController.DeleteBatchEventsRoot">
            <summary>
            Delete - Batch Delete 
            </summary>
            <remarks>Delete all Events </remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="200">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.EventsController.GetEventsCountAllAsync">
            <summary>
            Get - Retrieve Stored Events Count All
            </summary>
            <remarks>Retrieve Stored Events Count All</remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="200">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.EventsController.GetEventsCountPrioritizedAsync">
            <summary>
            Get - Retrieve Stored Events Count Prioritized
            </summary>
            <remarks>Retrieve Stored Events Count Prioritized</remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="200">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.EventsController.GetEventsCountLivePrioritizedAsync">
            <summary>
            Get - Retrieve Stored Live Events Count Prioritized
            </summary>
            <remarks>Retrieve Stored Live Events Count Prioritized</remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="200">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.EventsController.GetEventsCountUpcomingLiveAsync">
            <summary>
            Get - Retrieve Stored Events Count Upcoming Live
            </summary>
            <remarks>Retrieve Stored Events Count Upcoming Live</remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="200">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.EventsController.GetEventsCountLiveAsync">
            <summary>
            Get - Retrieve Stored Events Count Live
            </summary>
            <remarks>Retrieve Stored Events Count Live</remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="200">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.EventsController.GetEventsCountFavoriteAsync">
            <summary>
            Get - Retrieve Stored Events Count Favorites
            </summary>
            <remarks>Retrieve Stored Events Count Favorites</remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="200">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.EventsController.UpdateEventWithModifiedEventModelAsync(System.Guid,horizonsb.commons.vm.Dtos.Events.EventForModificationUiModel)">
            <summary>
            Update Event with New Priority And Favorite status
            </summary>
            <param name="id">Event Id the Request Index for Retrieval</param>
            <param name="updatedEvent">EventForModification the Request Model with New Priority And Favorite</param>
            <remarks>Change Event providing EventForModificationUiModel with Modified Priority and Favorite</remarks>
            <response code="200">Resource updated correctly.</response>
            <response code="400">The model is not in valid state.</response>
            <response code="403">You have not access for this action.</response>
            <response code="404">Wrong attributes provided.</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.EventsController.UpdateEventToBeInFavoritesAsync(System.Guid,horizonsb.commons.vm.Dtos.Events.EventForModificationFavoritesUiModel)">
            <summary>
            Update Event to favorites
            </summary>
            <param name="id">Event Id the Request Index for Retrieval</param>
            <param name="updatedEvent">EventForModificationFavoritesUiModel the Request Model with New Favorite Status</param>
            <remarks>Change Event providing EventForModificationFavoritesUiModel with Modified Favorite Status</remarks>
            <response code="200">Resource updated correctly.</response>
            <response code="400">The model is not in valid state.</response>
            <response code="403">You have not access for this action.</response>
            <response code="404">Wrong attributes provided.</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.EventsController.UpdateEventWithModifiedLivePriorityAsync(System.Guid,horizonsb.commons.vm.Dtos.Events.EventForModificationWithLivePriorityUiModel)">
            <summary>
            Update Event with New Live Priority
            </summary>
            <param name="id">Event Id the Request Index for Retrieval</param>
            <param name="updatedEvent">EventForModificationWithLivePriorityUiModel the Request Model with New Priority</param>
            <remarks>Change Event providing EventForModificationWithLivePriorityUiModel with Modified Live Priority</remarks>
            <response code="200">Resource updated correctly.</response>
            <response code="400">The model is not in valid state.</response>
            <response code="403">You have not access for this action.</response>
            <response code="404">Wrong attributes provided.</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.EventsController.GetEventAsync(System.Guid,System.String)">
            <summary>
            Get - Retrieve Stored Event providing Event Id
            </summary>
            <param name="id">Event Id the Request Index for Retrieval</param>
            <param name="fields">Fiends to be filtered with for the returned Event</param>
            <remarks>Retrieve Event providing Id and [Optional] fields</remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="200">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.EventsController.GetEventByMarketLegacyIdRoot(System.String,System.String)">
            <summary>
            Get - Retrieve Stored Event providingMarket Legacy Id
            </summary>
            <param name="legacyId">Event Id the Request Index for Retrieval</param>
            <param name="fields">Fiends to be filtered with for the returned Event</param>
            <remarks>Retrieve Event providing Id and [Optional] fields</remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="200">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.EventsController.GetEventsAsync(horizonsb.common.infrastructure.Helpers.ResourceParameters.EventsResourceParameters)">
            <summary>
            Get - Retrieve All/or Partial Paged Stored Events
            </summary>
            <remarks>Retrieve paged Events providing Paging Query</remarks>
            <response code="200">Resource retrieved correctly.</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.EventsController.GetFavoriteEventsAsync(horizonsb.common.infrastructure.Helpers.ResourceParameters.EventsResourceParameters)">
            <summary>
            Get - Retrieve All/or Partial Paged Stored Favorite Events
            </summary>
            <remarks>Retrieve paged Events providing Paging Query</remarks>
            <response code="200">Resource retrieved correctly.</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.LivesController.PutRegisterLiveEventAsync">
            <summary>
            Put - Update - Register Live Events
            </summary>
            <remarks> Update - Register Live Events</remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="400">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.LivesController.GetRetrieveOnDemandLiveEventAsync">
            <summary>
            Get - Retrieve Live Events
            </summary>
            <remarks>Retrieve All Live Events</remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="400">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.LivesController.GetRetrieveOnDemandLiveEventLiteAsync">
            <summary>
            Get - Retrieve Live Events
            </summary>
            <remarks>Retrieve All Live Events</remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="400">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.LivesController.GetRetrieveOnDemandLiveEventLite2Αsync">
            <summary>
            Get - Retrieve Live Events
            </summary>
            <remarks>Retrieve All Live Events</remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="400">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.LivesController.GetRetrieveOnDemandLiveEventCountAsync">
            <summary>
            Get - Retrieve Live Events Count
            </summary>
            <remarks>Retrieve All Live Events</remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="400">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.MarketsController.GetMarketsCountAllAsync">
            <summary>
            Get - Retrieve Stored Markets Count All
            </summary>
            <remarks>Retrieve Stored Markets Count All</remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="200">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.MarketsController.GetOddsCountPrioritizedAsync">
            <summary>
            Get - Retrieve Stored Odds Count Prioritized
            </summary>
            <remarks>Retrieve Stored Odds Count Prioritized</remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="200">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.MarketsController.GetMarketAsync(System.Guid,System.String)">
            <summary>
            Get - Retrieve Stored Market providing Market Id
            </summary>
            <param name="id">Market Id the Request Index for Retrieval</param>
            <param name="fields">Fiends to be filtered with for the returned Market</param>
            <remarks>Retrieve Market providing Id and [Optional] fields</remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="200">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.MarketsController.GetMarketsByEventIdAsync(System.Guid,horizonsb.common.infrastructure.Helpers.ResourceParameters.MarketsResourceParameters)">
            <summary>
            Get - Retrieve All/or Partial Paged Stored Markets By EventId
            </summary>
            <remarks>Retrieve paged Markets providing Paging Query and eventId </remarks>
            <param name="eventId">Event Id the Request Index for Retrieval</param>
            <response code="200">Resource retrieved correctly.</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.MarketsController.GetMarketsAsync(horizonsb.common.infrastructure.Helpers.ResourceParameters.MarketsResourceParameters)">
            <summary>
            Get - Retrieve All/or Partial Paged Stored Markets
            </summary>
            <remarks>Retrieve paged Markets providing Paging Query</remarks>
            <response code="200">Resource retrieved correctly.</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.MarketTypesController.PostMarketTypeInitAync">
            <summary>
            Get - Retrieve Stored Market Type providing Market Type Id
            </summary>
            <param name="id">Market Type Id the Request Index for Retrieval</param>
            <param name="fields">Fiends to be filtered with for the returned Market Type</param>
            <remarks>Retrieve MarketType providing Id and [Optional] fields</remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="200">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.MarketTypesController.GetMarketAsync(System.Guid,System.String)">
            <summary>
            Get - Retrieve Stored Market Type providing Market Type Id
            </summary>
            <param name="id">Market Type Id the Request Index for Retrieval</param>
            <param name="fields">Fiends to be filtered with for the returned Market Type</param>
            <remarks>Retrieve MarketType providing Id and [Optional] fields</remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="200">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.MarketTypesController.GetMarketsBySportIdAsync(System.String,System.String)">
            <summary>
            Get - Retrieve All/or Partial Paged Stored Markets By SportId
            </summary>
            <remarks>Retrieve paged Markets providing Paging Query and sportId </remarks>
            <param name="sportId">Sport Id the Request Index for Retrieval</param>
            <param name="fields">Fiends to be filtered with for the returned Market Type</param>
            <response code="200">Resource retrieved correctly.</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.MarketTypesController.DeleteMarketTypeAsync(System.String)">
            <summary>
            Delete - Remove Market Type providing sportId
            </summary>
            <remarks>Delete all Events </remarks>
            <param name="sportId">Sport Id the Request Index for Deletion</param>
            <response code="200">Resource retrieved correctly</response>
            <response code="200">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.SportsController.DeleteBatchSports">
            <summary>
            Delete - Batch Delete 
            </summary>
            <remarks>Retrieve Sports providing Priority and Equation</remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="200">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.SportsController.GetSportsCountAllAsync">
            <summary>
            Get - Retrieve Stored Sports Count All
            </summary>
            <remarks>Retrieve Stored Sports Count All</remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="200">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.SportsController.GetSportsCountPrioritizedAsync">
            <summary>
            Get - Retrieve Stored Sports Count Prioritized
            </summary>
            <remarks>Retrieve Stored Sports Count Prioritized</remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="200">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.SportsController.GetSportsByPriorityAsync(System.Int32,System.Int32)">
            <summary>
            Get - Retrieve Stored Sports providing Priority Number and Equation
            </summary>
            <param name="priority">Priority Number the Request Index for Retrieval</param>
            <param name="equation">If = 0 = equal, = 1 = min, = 2 = max</param>
            <remarks>Retrieve Sports providing Priority and Equation</remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="400">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.SportsController.GetSportAsync(System.Guid,System.String)">
            <summary>
            Get - Retrieve Stored Sports providing Sport Id
            </summary>
            <param name="id">Sport Id the Request Index for Retrieval</param>
            <param name="fields">Fiends to be filtered with for the returned Sports</param>
            <remarks>Retrieve Sports providing Id and [Optional] fields</remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="400">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.SportsController.UpdateSportWithModifiedPriorityAsync(System.Guid,horizonsb.commons.vm.Dtos.Sports.SportForModificationUiModel)">
            <summary>
            Update Sport with New Priority
            </summary>
            <param name="id">Sport Id the Request Index for Retrieval</param>
            <param name="updatedSport">SportForModification the Request Model with New Priority</param>
            <remarks>Change Sport providing SportForModificationUiModel with Modified Priority</remarks>
            <response code="200">Resource updated correctly.</response>
            <response code="400">The model is not in valid state.</response>
            <response code="403">You have not access for this action.</response>
            <response code="404">Wrong attributes provided.</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.SportsController.UpdateSportWithModifiedConfigurationAsync(System.String,horizonsb.commons.vm.Dtos.Sports.SportForModificationConfigurationUiModel)">
            <summary>
            Update Sport with New Configuration
            </summary>
            <param name="sportid">Sport Id the Request Index for Retrieval</param>
            <param name="updatedSport">SportForModification the Request Model with New Configuration - Valid Values: 'USA' - 'EUR' </param>
            <remarks>Change Sport providing SportForModificationConfigurationUiModel with Modified Configuration</remarks>
            <response code="200">Resource updated correctly.</response>
            <response code="400">The model is not in valid state.</response>
            <response code="403">You have not access for this action.</response>
            <response code="404">Wrong attributes provided.</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.SportsController.GetSportsAsync(horizonsb.common.infrastructure.Helpers.ResourceParameters.SportsResourceParameters)">
            <summary>
            Get - Retrieve All/or Partial Paged Stored Sports
            </summary>
            <remarks>Retrieve paged Sports providing Paging Query</remarks>
            <response code="200">Resource retrieved correctly.</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.TournamentsController.GetTournamentsByPriorityAsync(System.Int32,System.Int32)">
            <summary>
            Get - Retrieve Stored Tournaments providing Priority Number and Equation
            </summary>
            <param name="priority">Priority Number the Request Index for Retrieval</param>
            <param name="equation">If = 0 = equal, = 1 = min, = 2 = max</param>
            <remarks>Retrieve Tournaments providing Priority and Equation</remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="200">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.TournamentsController.GetTournamentsCountAllAsync">
            <summary>
            Get - Retrieve Stored Tournaments Count All
            </summary>
            <remarks>Retrieve Stored Tournaments Count All</remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="200">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.TournamentsController.GetTournamentsCountPrioritizedAsync">
            <summary>
            Get - Retrieve Stored Tournaments Count Prioritized
            </summary>
            <remarks>Retrieve Stored Tournaments Count Prioritized</remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="200">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.TournamentsController.UpdateTournamentWithModifiedPriorityAsync(System.Guid,horizonsb.commons.vm.Dtos.Tournaments.TournamentForModificationUiModel)">
            <summary>
            Update Tournament with New Priority
            </summary>
            <param name="id">Tournament Id the Request Index for Retrieval</param>
            <param name="updatedTournament">TournamentForModification the Request Model with New Priority</param>
            <remarks>Change Tournament providing TournamentForModificationUiModel with Modified Priority</remarks>
            <response code="200">Resource updated correctly.</response>
            <response code="400">The model is not in valid state.</response>
            <response code="403">You have not access for this action.</response>
            <response code="404">Wrong attributes provided.</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.TournamentsController.GetTournamentAsync(System.Guid,System.String)">
            <summary>
            Get - Retrieve Stored Tournament providing Tournament Id
            </summary>
            <param name="id">Tournament Id the Request Index for Retrieval</param>
            <param name="fields">Fiends to be filtered with for the returned Tournament</param>
            <remarks>Retrieve Tournament providing Id and [Optional] fields</remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="200">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.TournamentsController.GetTournamentsBySportIdAsync(System.Guid,horizonsb.common.infrastructure.Helpers.ResourceParameters.TournamentsResourceParameters)">
            <summary>
            Get - Retrieve All/or Partial Paged Stored Tournaments By SportId
            </summary>
            <remarks>Retrieve paged Tournaments providing Paging Query and sportId </remarks>
            <param name="sportId">Sport Id the Request Index for Retrieval</param>
            <param name="tournamentsResourceParameters"></param>
            <response code="200">Resource retrieved correctly.</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.TournamentsController.GetTournamentsAsync(horizonsb.common.infrastructure.Helpers.ResourceParameters.TournamentsResourceParameters)">
            <summary>
            Get - Retrieve All/or Partial Paged Stored Tournaments
            </summary>
            <remarks>Retrieve paged Tournaments providing Paging Query</remarks>
            <response code="200">Resource retrieved correctly.</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.WsController.GetKeeAliveRequestAsync">
            <summary>
            Get - Keep Alive Live WebSocket
            </summary>
            <remarks>Get - Keep Alive Live WebSocket</remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="200">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.WsController.GetRetrieveSportAsync">
            <summary>
            Get - Sports - Categories - Tournaments
            </summary>
            <remarks>Retrieve Sports - Categories - Tournaments</remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="200">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Controllers.API.WsController.GetRetrieveAllEventAsync">
            <summary>
            Get - Retrieve All Sports Events
            </summary>
            <remarks>Retrieve All Sports Events</remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="400">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:horizonsb.api.Redis.RedisConverter.ToStringArray(StackExchange.Redis.RedisValue[])">
            <summary>
            Create an array of strings from an array of values
            </summary>
        </member>
    </members>
</doc>
